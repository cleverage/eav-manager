{#
Displays flash messages for main keys
#}
{% macro flash_messages() %}
    {% for name in ['error', 'warning', 'success', 'info'] %}
        {% for message in app.session.flashBag.get(name) %}
            <div class="alert alert-{{ name == 'error' ? 'danger' : name }}">
                <button type="button" class="close" data-dismiss="alert">&times;</button>
                {{ message|raw }}
            </div>
        {% endfor %}
    {% endfor %}
{% endmacro %}

{#
Displays a menu link
#}
{% macro menu_link(title, route, routes, parameters) %}
    {% if routes is defined and routes %}
        {% set routes = routes | merge([route]) %}
    {% else %}
        {% set routes = [route] %}
    {% endif %}
    <li {% if app.request.attributes.get('_route') in routes %}class="active"{% endif %}>
        <a href="{{ path(route, parameters|default({})) }}">{{ title|raw }}</a>
    </li>
{% endmacro %}

{#
Displays a menu link with an icon
#}
{% macro menu_icon_link(icon, title, route, routes, parameters) %}
    {% import _self as current %}
    {% set title = icon(icon) ~ '&nbsp;' ~ title %}
    {{ current.menu_link(title, route, routes, parameters) }}
{% endmacro %}

{#
Displays an admin menu link
#}
{% macro admin_menu_link(title, admin, action, parameters) %}
    {% set admin = admin(admin) %}
    {% if is_granted(action, admin.entity) %}
        {% set title = title ?: tryTrans(['admin.'~admin.code~'.title'], [], admin.code|humanize) %}
        <li {% if admin.hasRoute(app.request.attributes.get('_route')) %}class="active"{% endif %}>
            <a href="{{ admin_path(admin, action, parameters|default({})) }}">{{ title|raw }}</a>
        </li>
    {% endif %}
{% endmacro %}

{#
Displays an admin menu link with an icon
#}
{% macro admin_menu_icon_link(icon, title, admin, action, parameters) %}
    {% import _self as current %}
    {% set admin = admin(admin) %}
    {% set title = title ?: tryTrans(['admin.'~admin.code~'.title'], [], admin.code|humanize) %}
    {% set icon = icon ?: admin.option('icon') %}
    {% set title = icon(icon) ~ '&nbsp;' ~ title %}
    {{ current.admin_menu_link(title, admin, action, parameters) }}
{% endmacro %}

{#
Changes the current active datagrid row
#}
{% macro triggerDataEvent(admin, data, id, success, target) %}
    <script>
        {% set parameters = {
            dataId: id,
            dataLabel: render_value(data),
            admin: admin.code,
            action: admin.currentAction.code,
            success: success,
        } %}
        var event;
        if (typeof CustomEvent === 'function') {
            event = new Event('clever_admindata', {bubbles: true, cancelable: true});
        } else {
            event = document.createEvent('Event');
            event.initEvent('clever_admindata', true, true);
        }
        event.detail = {{ parameters|json_encode|raw }};
        var target = document.getElementById('{{ target }}'.replace('#', ''));
        if (target) {
            target.dispatchEvent(event);
        } else {
            document.dispatchEvent(event);
        }
    </script>
{% endmacro %}

{#
Locks the form attached to the modified input
#}
{% macro lock_form(inputId, target) %}
    <script>
        // Launched only on ajax calls when jQuery is already defined: lock
        if (typeof $ !== 'undefined') {
            {% if inputId %}
            // Lock navigation if form is updated
            lockNavigationOnChange(
                '#{{ inputId }}',
                '{{ 'form.abandon_changes.confirmation'|trans|escape('js') }}'
                    {% if target %}, '{{ target|escape('js') }}'{% endif %}
            );
            {% endif %}
        }
    </script>
{% endmacro %}

{#
Used to generate a menu for the given families
#}
{% macro family_menu(admin, families, activeFamily) %}
    {% import _self as current %}
    {% if families is defined and families | length > 0 %}
        <ul class="nav nav-pills nav-stacked">
            {% for f in families %}
                {{ current.family_menu_link(admin, f, activeFamily) }}
            {% endfor %}
        </ul>
    {% endif %}
{% endmacro %}

{#
Used to generate a single menu item for a family
#}
{% macro family_menu_link(admin, family, activeFamily) %}
    {% set family = family.code is defined ? family : get_family(family) %}
    {% if admin.hasAction('list') and is_granted('list', family) %}
        <li {% if activeFamily and activeFamily.code == family.code %}class="active"{% endif %}>
            <a href="{{ admin_path(admin, 'list', {familyCode: family.code}) }}">{{ family }}</a>
            {#{{ current.family_menu(admin, f.children, activeFamily) }}#}
        </li>
    {% endif %}
{% endmacro %}

{#
Displays the global context switcher
#}
{% macro context_form() %}
    {% set contextForm = context_form() %}
    {% if contextForm %}
        <hr>
        {{ form_start(contextForm) }}
        {% for subForm in contextForm %}
            {{ form_widget(subForm) }}
        {% endfor %}&nbsp;
        <button type="submit" class="btn btn-default btn-md">
            {{ icon('language') }}&nbsp;{{ 'admin.change_context.label'|trans }}
        </button>
        {{ form_end(contextForm) }}
        <p class="clear"></p>
    {% endif %}
{% endmacro %}

{#
Displays a link button to an entity, checking permissions and with configurable title, class, target and icon
#}
{% macro eav_action_button(admin, entity, actionName, options, routeParameters) %}
    {% import _self as current %}
    {{ current.action_button(admin, entity, actionName, options, routeParameters) }}
{% endmacro %}

{#
Displays a link button to an entity with configurable title, class, target and icon
#}
{% macro action_button(admin, entity, actionName, options, routeParameters) %}
    {% spaceless %}
        {# @var admin \Sidus\AdminBundle\Admin\Admin #}
        {% if admin.hasAction(actionName) and is_granted(actionName, entity) %}
            {# Compute title #}
            {% if options.title is defined %}
                {% set title = options.title %}
            {% elseif entity|instanceof('Sidus\EAVModelBundle\Entity\DataInterface') %}
                {% set title = tryTrans([
                    'admin.family.'~entity.familyCode~'.'~actionName~'.label',
                    'admin.'~admin.code~'.'~actionName~'.label',
                    'admin.action.'~actionName~'.label',
                ], {}, actionName) %}
            {% else %}
                {% set title = tryTrans([
                    'admin.'~admin.code~actionName~'.label',
                    'admin.action.'~actionName~'.label',
                ], {}, actionName) %}
            {% endif %}
            <a href="{{ admin_entity_path(admin, entity, actionName, routeParameters|default([])) }}"
               title="{{ title }}" class="{{ options.class is defined ? options.class : 'btn btn-default' }}"
                    {% if options.automodal is defined and options.automodal %}
                        data-auto-modal="{{ options.automodal }}"
                    {% endif %}
                    {% if options.target is defined and options.target %}
                        data-target-element="{{ options.target }}"
                    {% endif %}{#
            #}>
                {%- spaceless -%}
                    {%- if not options.no_icon|default(false) -%}
                        {{ icon(options.icon is defined ? options.icon : actionName) }}
                    {%- endif -%}
                    {%- set finalTitle -%}
                        {% if options.title_as_content|default(false) %}
                            {{ title }}
                        {% else %}
                            {{ options.content|default('')|raw }}
                        {% endif %}
                    {%- endset -%}
                    {{ finalTitle|trim ? ('&nbsp;' ~ finalTitle)|raw  }}
                {%- endspaceless -%}
            </a>
        {% endif %}
    {% endspaceless %}
{% endmacro %}

{#
Render title nav
#}
{% macro admin_title_nav(admin) %}
    <a class="admin-nav" data-toggle="collapse" href="#admin_{{ admin.code }}">
        <h5>
            {{ icon(admin.option('icon')) }}&nbsp;{#
            #}{{ tryTrans(['admin.'~admin.code~'.title'], [], admin.code|humanize)|trim }}
            <span class="pull-right"><span class="caret"></span></span>
        </h5>
    </a>
{% endmacro %}

{#
Render left nav for families
#}
{% macro admin_family_nav(admin, family) %}
    {% import _self as current %}
    {{ current.admin_title_nav(admin) }}
    <div id="admin_{{ admin.code }}"
         class="collapse{% if admin.hasRoute(app.request.attributes.get('_route')) %} in{% endif %}">
        {{ current.family_menu(admin, admin.option('families', [])|keys, family) }}
    </div>
{% endmacro %}
