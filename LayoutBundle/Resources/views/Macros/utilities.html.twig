{#
Displays flash messages for main keys
#}
{% macro flash_messages() %}
    {% for name in ['error', 'warning', 'success', 'info'] %}
        {% for message in app.session.flashBag.get(name) %}
            <div class="alert alert-{{ name }}">
                <button type="button" class="close" data-dismiss="alert">&times;</button>
                {{ message|raw }}
            </div>
        {% endfor %}
    {% endfor %}
{% endmacro %}

{#
Displays a menu link
#}
{% macro menu_link(title, route, routes, parameters) %}
    {% if routes is defined and routes %}
        {% set routes = routes | merge([route]) %}
    {% else %}
        {% set routes = [route] %}
    {% endif %}
    <li {% if app.request.attributes.get('_route') in routes %}class="active"{% endif %}>
        <a href="{{ path(route, parameters|default({})) }}">{{ title|raw }}</a>
    </li>
{% endmacro %}

{#
Displays a menu link with an icon
#}
{% macro menu_icon_link(icon, title, route, routes, parameters) %}
    {% import _self as current %}
    {% set title = ('<i class="fa fa-' ~ icon ~ '"></i> ') ~ title %}
    {{ current.menu_link(title, route, routes, parameters) }}
{% endmacro %}

{#
Displays an admin menu link
#}
{% macro admin_menu_link(title, admin, action, parameters) %}
    {% set admin = admin(admin) %}
    {% set title = title ?: tryTrans(['admin.'~admin.code~'.title'], [], admin.code|humanize) %}
    <li {% if admin.hasRoute(app.request.attributes.get('_route')) %}class="active"{% endif %}>
        <a href="{{ admin_path(admin, action, parameters|default({})) }}">{{ title|raw }}</a>
    </li>
{% endmacro %}

{#
Displays an admin menu link with a FA icon
#}
{% macro admin_menu_icon_link(icon, title, admin, action, parameters) %}
    {% import _self as current %}
    {% set admin = admin(admin) %}
    {% set title = title ?: tryTrans(['admin.'~admin.code~'.title'], [], admin.code|humanize) %}
    {% set title = ('<i class="fa fa-' ~ icon ~ '"></i> ') ~ title %}
    {{ current.admin_menu_link(title, admin, action, parameters) }}
{% endmacro %}

{#
Changes the current active datagrid row
#}
{% macro triggerDataEvent(admin, data, id, success, target) %}
    <script>
        {% set parameters = {
        dataId: id,
        dataLabel: data|trim,
        admin: admin.code,
        action: admin.currentAction.code,
        success: success,
        } %}
        var event;
        if (typeof CustomEvent == 'function') {
            event = new Event('{{ admin.currentAction.code }}_admindata', {bubbles: true, cancelable: true});
        } else {
            event = document.createEvent('Event');
            event.initEvent('{{ admin.currentAction.code }}_admindata', true, true);
        }
        event.detail = {{ parameters|json_encode|raw }};
        var target = document.getElementById('{{ target }}'.replace('#', ''));
        if (target) {
            target.dispatchEvent(event);
        } else {
            document.dispatchEvent(event);
        }
    </script>
{% endmacro %}

{#
Locks the form attached to the modified input
#}
{% macro lock_form(inputId, target) %}
    <script>
        // Launched only on ajax calls when jQuery is already defined: lock
        if (typeof $ != 'undefined') {
            {% if inputId %}
            // Lock navigation if form is updated
            lockNavigationOnChange(
                    '#{{ inputId }}',
                    '{{ 'form.abandon_changes.confirmation'|trans|escape('js') }}'
                    {% if target %}, '{{ target|escape('js') }}'{% endif %}
            );
            {% endif %}
        }
    </script>
{% endmacro %}

{#
Used to generate a menu for the given families
#}
{% macro family_menu(admin, families, activeFamily) %}
    {% import _self as current %}
    {% if families is defined and families | length > 0 %}
        <ul class="nav nav-pills nav-stacked">
            {% for f in families %}
                {% set f = f.code is defined ? f : get_family(f) %}
                {% if is_granted('list', f) or is_granted('ROLE_DATA_ADMIN') %}
                    <li {% if activeFamily and activeFamily.code == f.code %}class="active"{% endif %}>
                        <a href="{{ admin_path(admin, 'list', {familyCode: f.code}) }}">{{ f }}</a>
                        {#{{ current.family_menu(admin, f.children, activeFamily) }}#}
                    </li>
                {% endif %}
            {% endfor %}
        </ul>
    {% endif %}
{% endmacro %}

{#
Displays the global context switcher
#}
{% macro context_form() %}
    {% set contextForm = context_form() %}
    {% if contextForm %}
        {{ form_start(contextForm, {attr: {class: 'navbar-form navbar-right'}}) }}
        {% for subForm in contextForm %}
            {{ form_widget(subForm) }}
        {% endfor %}&nbsp;
        <button type="submit" class="btn btn-default btn-sm pull-right">
            <i class="fa fa-language"></i> {{ 'admin.change_context.label'|trans }}
        </button>
        {{ form_end(contextForm) }}
    {% endif %}
{% endmacro %}

{#
Displays a link button to an entity, checking permissions and with configurable title, class, target and icon
#}
{% macro eav_action_button(admin, entity, actionName, options) %}
    {# @var admin \Sidus\AdminBundle\Admin\Admin #}
    {% if admin.hasAction(actionName) %}
        {% if is_granted(actionName, entity.family) or is_granted('ROLE_DATA_ADMIN') %}
            {% if options.title is defined %}
                {% set title = options.title %}
            {% else %}
                {% set title = tryTrans([
                'admin.family.'~entity.family.code~actionName~'.label',
                'admin.'~admin.code~actionName~'.label',
                'admin.action.'~actionName~'.label',
                ], {}, actionName) %}
            {% endif %}
            <a href="{{ admin_entity_path(admin, entity, actionName) }}" title="{{ title }}"
               class="{{ options.class|default('btn btn-default') }}"
               data-target-element="{{ options.target|default('#tg_right') }}">
                <i class="fa fa-{{ options.icon is defined ? options.icon : actionName }}"></i>
            </a>
        {% endif %}
    {% endif %}
{% endmacro %}


{#
Displays a link button to an entity with configurable title, class, target and icon
#}
{% macro action_button(admin, entity, actionName, options) %}
    {# @var admin \Sidus\AdminBundle\Admin\Admin #}
    {% if admin.hasAction(actionName) %}
        {% if options.title is defined %}
            {% set title = options.title %}
        {% else %}
            {% set title = tryTrans([
            'admin.'~admin.code~actionName~'.label',
            'admin.action.'~actionName~'.label',
            ], {}, actionName) %}
        {% endif %}
        <a href="{{ admin_entity_path(admin, entity, actionName) }}" title="{{ title }}"
           class="{{ options.class|default('btn btn-default') }}"
           data-target-element="{{ options.target|default('#tg_right') }}">
            <i class="fa fa-{{ options.icon is defined ? options.icon : actionName }}"></i>
        </a>
    {% endif %}
{% endmacro %}

{#
Render title nav
#}
{% macro admin_title_nav(admin) %}
    <a class="admin-nav" data-toggle="collapse" href="#admin_{{ admin.code }}">
        <h5>
            <i class="fa fa-{{ admin.option('icon') }}"></i>
            {{ tryTrans(['admin.'~admin.code~'.title'], [], admin.code|humanize) }}
            <span class="pull-right"><span class="caret"></span></span>
        </h5>
    </a>
{% endmacro %}

{#
Render left nav for families
#}
{% macro admin_family_nav(admin, family) %}
    {% import _self as current %}
    {{ current.admin_title_nav(admin) }}
    <div id="admin_{{ admin.code }}"
         class="collapse{% if admin.hasRoute(app.request.attributes.get('_route')) %} in{% endif %}">
        {{ current.family_menu(admin, admin.option('families', [])|keys, family) }}
    </div>
{% endmacro %}
